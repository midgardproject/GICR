/* 
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

namespace GICR {

	/**
	 * The ObservationManager object.
	 *
	 * Acquired via Workspace.get_observation_manager. Allows for the
	 * registration and deregistration of event listeners.
	 */
	public interface ObservationManager : Object {
	
		/**
		 * Adds an event listener that listens for the specified eventTypes (a
		 * combination of one or more event types encoded as a bit mask value).
		 * The set of events will be further filtered by the access rights of the c
		 * urrent Session as well as the restrictions specified by the parameters of
		 * this method. These restrictions are stated in terms of characteristics of the
		 * associated parent node of the event.
		 *
		 * The associated parent node of an event is the parent node of the item at (or
		 * formerly at) the path returned by EventInterface::getPath(). The following
		 * restrictions are available:
		 * * absPath, isDeep: Only events whose associated parent node is at absPath (or
		 *   within its subgraph, if isDeep is true) will be received. It is permissible
		 *   to register a listener for a path where no node currently exists.
		 * * uuid: Only events whose associated parent node has one of the identifiers in
		 *   this list will be received. If his parameter is null then no identifier-
		 *   related restriction is placed on events received. Note that specifying an
		 *   empty array instead of null would result in no nodes being listened to. The
		 *   term "UUID" is used for compatibility with JCR 1.0.
		 * * nodeTypeName: Only events whose associated parent node has one of the node
		 *   types (or a subtype of one of the node types) in this list will be received.
		 *   If his parameter is null then no node type-related restriction is placed on
		 *   events received. Note that specifying an empty array instead of null would
		 *   result in no nodes types being listened to.
		 *
		 * The restrictions are "ANDed" together. In other words, for a particular node
		 * to be "listened to" it must meet all the restrictions.
		 * Additionally, if noLocal is true, then events generated by the session
		 * through which the listener was registered are ignored. Otherwise, they are
		 * not ignored.
		 *
		 * The filters of an already-registered EventListener can be changed at runtime
		 * by re-registering the same EventListener object (i.e. the same actual object)
		 * with a new set of filter arguments. The implementation must ensure that no
		 * events are lost during the changeover.
		 *
		 * In addition to the filters placed on a listener above, the scope of
		 * observation support, in terms of which subgraphs are observable, may also be
		 * subject to implementation-specific restrictions. For example, in some
		 * repositories observation of changes in the jcr:system subgraph may not be
		 * supported
		 *
		 * @param listener An {@link EventListener} object.
		 * @param eventTypes A combination of one or more event type constants encoded as a bitmask.
		 * @param absPath The absolute path identifying the node to be observed.
		 * @param isDeep Switch to define the given path as a reference to a child node.
		 * @param uuid array of identifiers of events to be recieved.
		 * @param nodeTypeName array of node type names to identify the events to be recieved.
		 * @param noLocal switch to handle local events.
		 * @return void
		 *
		 * @throws RepositoryException if an error occurs.
		 */
		public abstract void add_event_listener (EventListener listener, int eventTypes, string absPath,
                                     bool isDeep, string[] uuid, string[] nodeTypeName, bool noLocal);

		/**
		 * Deregisters an event listener.
		 *
		 * A listener may be deregistered while it is being executed. The deregistration
		 * method will block until the listener has completed executing. An exception to
		 * this rule is a listener which deregisters itself from within the onEvent
		 * method. In this case, the deregistration method returns immediately, but
		 * deregistration will effectively be delayed until the listener completes.
		 *
		 * @param listener The {@link EventListener} to deregister.
		 * @return void
		 *
		 * @throws RepositoryException if an error occurs.
		 */
		public abstract void remove_event_listener (EventListener listener);

		/**
		 * Returns all event listeners that have been registered through this session.
		 *
		 * If no listeners have been registered, null is returned
		 *
		 * @return array of {@link EventListener} objects
		 *
		 * @throws RepositoryException if an error occurs
		 */
		public abstract EventListener[]? get_registered_event_listeners ();

		/**
		 * Sets the user data information that will be returned by Event.get_user_data.
		 *
		 * @param userData the user data
		 * @return void
		 *
		 * @throws RepositoryException if an error occurs
		 */
		public abstract void set_user_data (string userData);

		/**
		 * Retrieves the event journal for this workspace.
		 *
		 * If journaled observation is not supported for this workspace, null is
		 * returned.
		 *
		 * Events returned in the EventJournal instance will be filtered according
		 * to the parameters of this method, the current session's access
		 * restrictions as well as any additional restrictions specified through
		 * implemention-specific configuration.
		 *
		 * The parameters of this method filter the event set in the same way as
		 * they do in add_event_listener.
		 *
		 * @param eventTypes A combination of one or more event type constants encoded as a bitmask.
		 * @param absPath an absolute path.
		 * @param isDeep Switch to define the given path as a reference to a child node.
		 * @param uuid array of identifiers.
		 * @param nodeTypeName array of node type names.
		 * @return an {@link EventJournal} or null.
		 *
		 * @throws RepositoryException if an error occurs
		 */
		public abstract EventJournal get_event_journal (int? eventTypes, string? absPath, bool isDeep, string[]? uuid,
                                    string[]? nodeTypeName);
	}
}
